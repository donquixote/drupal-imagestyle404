<?php

/**
 * Implements hook_menu_alter()
 *
 * @param array $items
 *   Format: $[$files_dir . '/styles/%image_style'] = $router_item
 */
function imagestyle404_menu_alter(array &$items) {

  /** @var DrupalLocalStreamWrapper $public_stream_wrapper */
  $public_stream_wrapper = file_stream_wrapper_get_instance_by_scheme('public');
  $public_files_dir = $public_stream_wrapper->getDirectoryPath();

  foreach ([
    $public_files_dir,
    'system/files'
  ] as $files_dir) {
    /* @see image_style_load() */
    $original_router_path = $files_dir . '/styles/%image_style';

    if (!isset($items[$original_router_path])) {
      continue;
    }

    $item = $items[$original_router_path];

    if ('image_style_deliver' !== $item['page callback']) {
      continue;
    }

    /* @see _imagestyle404_image_style_deliver() */
    $item['page callback'] = '_imagestyle404_image_style_deliver';

    unset($items[$original_router_path]);
    // Same as the original path, but without the wildcard loader.
    $items[$files_dir . '/styles/%'] = $item;
  }
}

/**
 * Page callback. Replaces image_style_deliver().
 *
 * @param string $style_name
 *   The image style name.
 * @param string $scheme
 *   The file scheme, for example 'public' for public files.
 * @param string[] $target_fragments
 *   Fragment of the original image path.
 *   This path is called '$target' in image_style_deliver().
 *
 * @return mixed
 * @see \image_style_deliver()
 * @see \drupal_deliver_page()
 */
function _imagestyle404_image_style_deliver($style_name, $scheme = NULL, ...$target_fragments) {

  if (FALSE === $style = image_style_load($style_name)) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
          'Unknown image style "@style".',
          ['@style' => $style_name]));
  }

  if (empty($style)) {
    // Core's image_style_deliver() contains a check for "!empty($style)", so we
    // should do the same. This would occur if image_style_load() returns
    // something other than false or an image style array.
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
        'Broken image style "@style_name": @style',
        [
          '@style_name' => $style_name,
          '@style' => var_export($style, TRUE),
        ]));
  }

  if (NULL === $scheme) {
    return _imagestyle404_deliver_failure(
        '404 Not Found',
        'Too few url parts for image style generation: Scheme missing.');
  }

  if (!file_stream_wrapper_valid_scheme($scheme)) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
          'Invalid file scheme @scheme.',
          ['@scheme' => $scheme]));
  }

  if (array() === $target_fragments) {
    return _imagestyle404_deliver_failure(
        '404 Not Found',
        'Too few url parts for image style generation: Original image path missing.');
  }

  $target = implode('/', $target_fragments);

  if ('' === $target) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      'Too few url parts for image style generation: Original image path empty.');
  }

  if (0
    || !variable_get('image_allow_insecure_derivatives', FALSE)
    || 0 === strpos(ltrim($target, '\/'), 'styles/')
  ) {
    if (!isset($_GET[IMAGE_DERIVATIVE_TOKEN])) {
      return _imagestyle404_deliver_failure(
        '403 Forbidden',
        'Image derivative token parameter ("itok") is missing.');
    }

    $itok_actual = $_GET[IMAGE_DERIVATIVE_TOKEN];
    $itok_expected = image_style_path_token(
        $style_name,
        $scheme . '://' . $target);

    if ($itok_actual !== $itok_expected) {
      return _imagestyle404_deliver_failure(
        '403 Forbidden',
        'Image derivative token parameter ("itok") mismatch.');
    }
  }

  $image_uri = $scheme . '://' . $target;
  $derivative_uri = image_style_path($style['name'], $image_uri);

  // If using the private scheme, let other modules provide headers and
  // control access to the file.
  if ($scheme == 'private') {
    if (file_exists($derivative_uri)) {
      file_download($scheme, file_uri_target($derivative_uri));
    }
    else {
      $headers = file_download_headers($image_uri);
      if (empty($headers)) {
        return _imagestyle404_deliver_failure(
          '403 Forbidden',
          format_string(
              'Access denied for private file "@file".',
              ['@file' => $image_uri]));
      }
      if (count($headers)) {
        foreach ($headers as $name => $value) {
          drupal_add_http_header($name, $value);
        }
      }
    }
  }

  // Confirm that the original source image exists before trying to process it.
  if (!is_file($image_uri)) {
    watchdog('image', 'Source image at %source_image_path not found while trying to generate derivative image at %derivative_path.',  array('%source_image_path' => $image_uri, '%derivative_path' => $derivative_uri));
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
        'Source image file not found: @file.',
        ['@file' => $image_uri]));
  }

  // Don't start generating the image if the derivative already exists or if
  // generation is in progress in another thread.
  $lock_name = 'image_style_deliver:' . $style['name'] . ':' . drupal_hash_base64($image_uri);
  if (!file_exists($derivative_uri)) {
    $lock_acquired = lock_acquire($lock_name);
    if (!$lock_acquired) {
      // Tell client to retry again in 3 seconds. Currently no browsers are known
      // to support Retry-After.
      drupal_add_http_header('Status', '503 Service Unavailable');
      drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
      drupal_add_http_header('Retry-After', 3);
      print t('Image generation in progress. Try again shortly.');
      drupal_exit();
      exit();
    }
  }

  // Try to generate the image, unless another thread just did it while we were
  // acquiring the lock.
  $success = file_exists($derivative_uri) || image_style_create_derivative($style, $image_uri, $derivative_uri);

  if (!empty($lock_acquired)) {
    lock_release($lock_name);
  }

  if (!$success) {
    watchdog('image', 'Unable to generate the derived image located at %path.', array('%path' => $derivative_uri));
    drupal_add_http_header('Status', '500 Internal Server Error');
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    print t('Error generating image.');
    drupal_exit();
    exit();
  }

  $image = image_load($derivative_uri);
  file_transfer(
    $image->source,
    [
      'Content-Type' => $image->info['mime_type'],
      'Content-Length' => $image->info['file_size'],
    ]);
  exit();
}

/**
 * @param string $status
 * @param string|null $message
 *   Custom message that will be added in a custom header.
 *
 * @return null
 *   This never happens, instead it always calls drupal_exit().
 *   The return statement is a lazy way to make the IDE happy.
 */
function _imagestyle404_deliver_failure($status, $message = NULL) {
  drupal_add_http_header('Status', $status);
  if (NULL !== $message) {
    // Custom http header: See https://stackoverflow.com/a/19640336/246724
    drupal_add_http_header('X-Drupal-imagestyle404-Message', $message);
  }
  // See https://stackoverflow.com/a/3203394/246724
  drupal_add_http_header('Content-type', 'image/png');
  echo base64_decode('R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw==');
  drupal_exit();
  // Tell the IDE that the function ends here.
  return NULL;
}
