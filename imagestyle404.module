<?php

/**
 * Implements hook_menu_alter()
 *
 * @param array $items
 *   Format: $[$files_dir . '/styles/%image_style'] = $router_item
 */
function imagestyle404_menu_alter(array &$items) {

  /** @var DrupalLocalStreamWrapper $public_stream_wrapper */
  $public_stream_wrapper = file_stream_wrapper_get_instance_by_scheme('public');
  $public_files_dir = $public_stream_wrapper->getDirectoryPath();
  /* @see image_style_load() */
  $original_router_path = $public_files_dir . '/styles/%image_style';

  if (!isset($items[$original_router_path])) {
    return;
  }

  $item = $items[$original_router_path];

  if ('image_style_deliver' !== $item['page callback']) {
    return;
  }

  /* @see _imagestyle404_image_style_deliver() */
  $item['page callback'] = '_imagestyle404_image_style_deliver';

  unset($items[$original_router_path]);
  // Same as the original path, but without the wildcard loader.
  $items[$public_files_dir . '/styles/%'] = $item;
}

/**
 * Page callback. Replaces image_style_deliver().
 *
 * @param string $style_name
 *   The image style name.
 * @param string $scheme
 *   The file scheme, for example 'public' for public files.
 * @param string[] $target_fragments
 *   Fragment of the original image path.
 *   This path is called '$target' in image_style_deliver().
 *
 * @return mixed
 * @see \image_style_deliver()
 * @see \drupal_deliver_page()
 */
function _imagestyle404_image_style_deliver($style_name, $scheme = NULL, ...$target_fragments) {

  if (FALSE === $style = image_style_load($style_name)) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
          'Unknown image style "@style".',
          ['@style' => $style_name]));
  }

  if (empty($style)) {
    // Core's image_style_deliver() contains a check for "!empty($style)", so we
    // should do the same. This would occur if image_style_load() returns
    // something other than false or an image style array.
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
        'Broken image style "@style_name": @style',
        [
          '@style_name' => $style_name,
          '@style' => var_export($style, TRUE),
        ]));
  }

  if (NULL === $scheme) {
    return _imagestyle404_deliver_failure(
        '404 Not Found',
        'Too few url parts for image style generation: Scheme missing.');
  }

  if (!file_stream_wrapper_valid_scheme($scheme)) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      format_string(
          'Invalid file scheme @scheme.',
          ['@scheme' => $scheme]));
  }

  if (array() === $target_fragments) {
    return _imagestyle404_deliver_failure(
        '404 Not Found',
        'Too few url parts for image style generation: Original image path missing.');
  }

  $target = implode('/', $target_fragments);

  if ('' === $target) {
    return _imagestyle404_deliver_failure(
      '404 Not Found',
      'Too few url parts for image style generation: Original image path empty.');
  }

  if (0
    || !variable_get('image_allow_insecure_derivatives', FALSE)
    || 0 === strpos(ltrim($target, '\/'), 'styles/')
  ) {
    if (!isset($_GET[IMAGE_DERIVATIVE_TOKEN])) {
      return _imagestyle404_deliver_failure(
        '403 Forbidden',
        'Image derivative token parameter ("itok") is missing.');
    }

    $itok_actual = $_GET[IMAGE_DERIVATIVE_TOKEN];
    $itok_expected = image_style_path_token(
        $style_name,
        $scheme . '://' . $target);

    if ($itok_actual !== $itok_expected) {
      return _imagestyle404_deliver_failure(
        '403 Forbidden',
        'Image derivative token parameter ("itok") mismatch.');
    }
  }

  $args = func_get_args();
  $args[0] = $style;

  $result = call_user_func_array('image_style_deliver', $args);

  if (MENU_ACCESS_DENIED === $result) {
    return _imagestyle404_deliver_failure('403 Forbidden');
  }

  if (MENU_NOT_FOUND === $result) {
    return _imagestyle404_deliver_failure('404 Not Found');
  }

  // This should be unreachable code, because image_style_deliver() never
  // returns anything else.
  return $result;
}

/**
 * @param string $status
 * @param string|null $message
 *   Custom message that will be added in a custom header.
 *
 * @return null
 *   This never happens, instead it always calls drupal_exit().
 *   The return statement is a lazy way to make the IDE happy.
 */
function _imagestyle404_deliver_failure($status, $message = NULL) {
  drupal_add_http_header('Status', $status);
  if (NULL !== $message) {
    // Custom http header: See https://stackoverflow.com/a/19640336/246724
    drupal_add_http_header('X-Drupal-imagestyle404-Message', $message);
  }
  // See https://stackoverflow.com/a/3203394/246724
  drupal_add_http_header('Content-type', 'image/png');
  echo base64_decode('R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw==');
  drupal_exit();
  // Tell the IDE that the function ends here.
  return NULL;
}
